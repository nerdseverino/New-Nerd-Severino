{"rss":{"version":"2.0","xmlns:atom":"http://www.w3.org/2005/Atom","channel":{"title":"Blog on Netlify: All-in-one platform for automating modern web projects","link":"https://www.netlify.com/blog/","description":"Recent content in Blog on Netlify: All-in-one platform for automating modern web projects","generator":"Hugo -- gohugo.io","language":"en-us","lastBuildDate":"Thu, 23 Apr 2020 00:00:00 +0000","atom:link":{"href":"https://www.netlify.com/index.xml","rel":"self","type":"application/rss+xml"},"item":[{"title":"Enable Gatsby Incremental Builds on Netlify","link":"https://www.netlify.com/blog/2020/04/23/enable-gatsby-incremental-builds-on-netlify/","pubDate":"Thu, 23 Apr 2020 00:00:00 +0000","author":{},"guid":"https://www.netlify.com/blog/2020/04/23/enable-gatsby-incremental-builds-on-netlify/","description":"<p>Gatsby recently released <a href=\"https://www.gatsbyjs.org/docs/page-build-optimizations-for-incremental-data-changes/\">incremental builds</a>, an improvement that reduces the amount of work required to build a Gatsby site. In this post, we’ll learn <strong>how to enable Gatsby incremental builds on Netlify.</strong></p>\n\n<h2 id=\"step-1-upgrade-to-gatsby-v2-20-4-or-higher\">Step 1: Upgrade to Gatsby v2.20.4 or higher</h2>\n\n<p>Gatsby introduced incremental builds in version 2.20.4, so make sure to upgrade your Gatsby site to the latest version.</p>\n\n<pre><code class=\"language-bash\"># this will upgrade to the latest version of Gatsby\nnpm install gatsby@latest\n</code></pre>\n\n<h2 id=\"step-2-enable-netlify-build-plugins\">Step 2: Enable Netlify Build Plugins</h2>\n\n<p>We need to keep the Gatsby cache between builds for incremental builds to work, and for that, we need to <a href=\"https://app.netlify.com/enable-beta?utm_source=blog&amp;utm_medium=gatsby-inc-builds-jl&amp;utm_campaign=devex\">enable the Netlify Build Plugins Beta</a>, which takes a couple of clicks in your Netlify dashboard.</p>\n\n<p>For more details on the beta, check out the <a href=\"https://docs.netlify.com/configure-builds/build-plugins/?utm_source=blog&amp;utm_medium=gatsby-inc-builds-jl&amp;utm_campaign=devex\">Build Plugins docs</a>.</p>\n\n<h2 id=\"step-3-add-the-gatsby-cache-netlify-build-plugin\">Step 3: Add the Gatsby Cache Netlify Build Plugin</h2>\n\n<p>Incremental builds rely on Gatsby’s cache, so we need to enable <code>netlify-plugin-gatsby-cache</code>, which will persist Gatsby’s <code>public</code> and <code>.cache</code> directories between builds.</p>\n\n<p>In your <code>netlify.toml</code>, add the following:</p>\n\n<pre><code class=\"language-toml\">[[plugins]]\n  package = &quot;netlify-plugin-gatsby-cache&quot;\n</code></pre>\n\n<p>Save and commit this change and Netlify will handle the rest!</p>\n\n<h2 id=\"step-4-add-the-flag-to-enable-gatsby-incremental-builds\">Step 4: Add the flag to enable Gatsby incremental builds</h2>\n\n<p>Finally, update your build command in <code>package.json</code> (or wherever you’ve set your build command) to include the incremental builds flag:</p>\n\n<pre><code class=\"language-diff-json\">    &quot;scripts&quot;: {\n      &quot;develop&quot;: &quot;gatsby develop&quot;,\n-     &quot;build&quot;: &quot;gatsby build&quot;\n+     &quot;build&quot;: &quot;GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES=true gatsby build --log-pages&quot;\n    },\n</code></pre>\n\n<p>We’re adding the optional <code>--log-pages</code> flag here so we can see what Gatsby builds on each run — feel free to leave that out if you don’t want to see the extra logs.</p>\n\n<h2 id=\"step-5-make-a-change-in-your-cms-and-see-the-incremental-builds\">Step 5: Make a change in your CMS and see the incremental builds!</h2>\n\n<p>Once we’ve made the above changes, our Gatsby site will run with incremental builds enabled! This means that changes from a supported CMS — Gatsby supports Contentful, Sanity, DatoCMS and CosmicJS at the time of writing with WordPress and Drupal support in alpha — Gatsby will only rebuild the parts of the site affected by the changed data.</p>\n\n<p>If we look at our build logs, the first build will show a full build with all of our pages:</p>\n\n<pre><code class=\"language-text\">2:00:43 PM: info Done building in 41.429647017 sec\n2:00:43 PM: info Built pages:\n2:00:43 PM: Updated page: /design-research-program\n2:00:43 PM: Updated page: /offline-plugin-app-shell-fallback/\n2:00:43 PM: Updated page: /\n2:00:43 PM: Updated page: /404/\n2:00:43 PM: Updated page: /404.html\n</code></pre>\n\n<p>On repeat builds, we can see that the Gatsby build is <em>much</em> faster and only rebuilds the page that was changed:</p>\n\n<pre><code class=\"language-text\">2:03:56 PM: info Done building in 17.691847403 sec\n2:03:56 PM: info Built pages:\n2:03:56 PM: Updated page: /design-research-program\n</code></pre>\n\n<h2 id=\"you-can-use-gatsby-incremental-builds-today\">You can use Gatsby incremental builds today!</h2>\n\n<p>If you’ve got a Gatsby site, you can enable incremental builds today!</p>\n\n<p>Give it a try, and enjoy builds that make your blazing fast Gatsby site even more blazinger! 🔥</p>"},{"title":"April Netlify Newsletter: Jamstack Conf Virtual Registration, Demos, Walkthroughs, and More!","link":"https://www.netlify.com/blog/2020/04/22/april-netlify-newsletter-jamstack-conf-virtual-registration-demos-walkthroughs-and-more/","pubDate":"Wed, 22 Apr 2020 00:00:00 +0000","author":{},"guid":"https://www.netlify.com/blog/2020/04/22/april-netlify-newsletter-jamstack-conf-virtual-registration-demos-walkthroughs-and-more/","description":"<p>This is a re-publishing of our monthly newsletter sent to subscribers earlier this week. Sign up to receive future email newsletters!</p>\n\n<aside class=\"blog-newsletter-signup card\">\n  <h2>Sign up to our newsletter</h2>\n  \n  \n  <form\n    name=\"newsletter\"\n    method=\"POST\"\n    action=\"/thanks-for-signing-up/\"\n    class=\"newsletter floating-labels\"\n    netlify>\n  <input type=\"hidden\" name=\"event\" value=\"site:formConversion\" />\n  \n  <input type=\"hidden\" name=\"event_form_name\" value=\"newsletter\" />\n  <input type=\"hidden\" name=\"event_lead_source\" value=\"Resource\" />\n  <input type=\"hidden\" name=\"event_mql_source\" value='newsletter signup &#43; Blog page inline' />\n  <p>Subscribe to our newsletter to make sure you don’t miss anything.</p>\n  <p class=\"form-field\">\n    <label>\n      <span class=\"label\">\n        Email address\n      </span>\n      <input name=\"email\" type=\"email\" required />\n    </label>\n  </p>\n  <p class=\"form-footer\">\n    <button type=\"submit\" class=\"button \">Subscribe</button>\n  </p>\n</form>\n\n</aside>\n\n<p>Hello! We are excited to open registration for Jamstack Conf virtual and can&rsquo;t wait to connect with you online. Also, our team has published lots of tutorials and case studies to our blog in recent weeks. So read on to check out some of the most popular articles, as well as an upcoming webinar about the journey from Drupal to the Jamstack.</p>\n\n<p><a href=\"https://www.netlify.com/blog/2020/04/16/announcing-jamstack-conf-virtual-schedule-and-registration/\">\n  <img src=\"https://userimg.customeriomail.com/EZIL6nSIuM6yQeclqkAa_jamstackconf-banner.png\">\n</a></p>\n\n<h2 id=\"sign-up-for-free-for-jamstack-conf-virtual-may-27-28\">Sign up for FREE for Jamstack Conf Virtual, May 27-28</h2>\n\n<p><a target=\"_blank\" href=\"https://ti.to/netlify/jamstack_virtual\">Registration is now open</a> for Jamstack Conf in May. We’ll explore connecting at global scale, including the pragmatic role played by developers, devops and the web. We’ll also cover the future of Jamstack for many use cases, including new innovations, demos and case studies. It is a free virtual, online event. Day one is focused on talks and more, and day two brings you workshops and tutorials. <a href=\"https://www.netlify.com/blog/2020/04/16/announcing-jamstack-conf-virtual-schedule-and-registration/\">View the updated schedule and speakers so far</a>. Interested sponsors can still <a target=\"_blank\" href=\"https://forms.gle/EuKgTKeiGrftgfo89\">contact us</a>. We hope to see everyone online in May!</p>\n\n<h2 id=\"new-saml-enforcement-capabilities-for-business-users\">New SAML enforcement capabilities for business users</h2>\n\n<p>Single sign-on (SSO) is a fast and secure way for your team to access the Netlify UI. While SAML-based SSO has been available for a while as a part of our Advanced Team Security plan, we recently made an update that lets you restrict access to only team members who use SSO. Other login types such as email, GitHub, GitLab, and Bitbucket will be denied access to the team unless they sign in via SSO. <a href=\"https://docs.netlify.com/accounts-and-billing/team-management/saml-single-sign-on/#get-started\">Learn more in our docs</a>.</p>\n\n<p><a href=\"https://netlify.zoom.us/webinar/register/7315870529341/WN_-hZ5gmiNRIqQP_cHHYIoNg\">\n  <img alt=\"\" src=\"https://userimg.customeriomail.com/7F2aOcqRn2p1YGImlUdw_Webinar%2030.png\">\n</a></p>\n\n<h2 id=\"upcoming-webinar-a-drupal-journey-to-the-jamstack\">Upcoming webinar: A Drupal Journey to the Jamstack</h2>\n\n<p>Join us on April 28 at 9 AM PT to learn from veteran Drupaler, Jamstack advocate, and Therefore CEO Alex De Winne. He&rsquo;ll explain why Drupal is still relevant and show you how to adapt it to be part of a robust Jamstack that works at scale. You&rsquo;ll see a live demo, a real world example of a major brand using Drupal and the Jamstack, and more!</p>\n\n<p><a target=\"_blank\" href=\"https://netlify.zoom.us/webinar/register/7315870529341/WN_-hZ5gmiNRIqQP_cHHYIoNg\">Register for this webinar here</a>.</p>\n\n<h2 id=\"refined-name-for-jamstack\">Refined Name for Jamstack</h2>\n\n<p>JAMstack, JAMStack, or Jamstack? After an <a href=\"https://github.com/jamstack/jamstack.org/issues/279#issuecomment-607896059\">in-depth conversation with the community</a> over the last month, we&rsquo;ve come together to adopt &ldquo;Jamstack&rdquo; across jamstack.org. We&rsquo;ll start using that spelling in materials from Netlify and look forward to seeing it adopted by the wider community.</p>\n\n<h2 id=\"last-call-for-your-feedback-for-the-jamstack-survey\">Last call for your feedback for the Jamstack survey</h2>\n\n<p>Help the Jamstack community by giving us your feedback in the <a target=\"_blank\" href=\"https://www.surveymonkey.com/r/DHJSKF6\">State of the Jamstack community survey</a>. When a community is growing this fast, it&rsquo;s hard to know what&rsquo;s standard practice and what&rsquo;s a niche interest. Tell us your Jamstack feedback and technology choices, so all can benefit from the results — newcomers and experienced users alike. The survey takes 15 minutes and is anonymous unless you want to be contacted. Survey closes April 26, and results will be shared during the Jamstack Conf virtual event.</p>\n\n<h2 id=\"automate-your-web-workflows-with-the-jamstack\">Automate your web workflows with the Jamstack</h2>\n\n<p>To highlight what makes the Jamstack so easily configurable compared to other frameworks for building sites, <a href=\"https://www.netlify.com/blog/2020/04/01/automate-your-web-workflows-with-the-jamstack/\">check out</a> our recent examination of Build Automation, Event Triggers, APIs and Serverless Functions.</p>\n\n<h2 id=\"learn-wordpress-on-the-jamstack-in-this-demo\">Learn WordPress on the Jamstack in this demo</h2>\n\n<p><a href=\"https://netlify.zoom.us/webinar/register/6915853373717/WN_hVvYQLy_Sd2YACOogtqM4w\">Watch this demo</a> to learn how to migrate a WordPress website to the modern Jamstack architecture. While WordPress provides a pleasant content management experience, it can come with some development and site speed issues. Netlify&rsquo;s Jason Lengstorf goes step-by-step through turning your WordPress site into a Jamstack site with a WordPress backend. You can keep the convenience of using WordPress’s custom backend for creating and editing content while also avoiding the downsides of WordPress.</p>\n\n<h2 id=\"best-practices-how-to-scope-down-pull-requests\">Best practices: How to scope down pull requests</h2>\n\n<p>One of the most valuable skills one can possess as a developer is to learn how to scope down your work into manageable pull requests (PRs). <a href=\"https://www.netlify.com/blog/2020/03/31/how-to-scope-down-prs/\">Check out this recent post</a> from Sarah Drasner on the processes you can use to scope PRs down, as well as who on your team can assist.</p>\n\n<h2 id=\"welcome-new-netlify-customers\">Welcome new Netlify customers!</h2>\n\n<p>We&rsquo;d like to extend a warm welcome to the latest companies who trust Netlify with their web infrastructure! Learn more about Netlify&rsquo;s enterprise products.</p>\n\n<p><a href=\"https://www.netlify.com/customers/\">\n  <img alt=\"\" src=\"https://userimg.customeriomail.com/2eJ8wgbqRi6rr4EKExpZ_netlify-customers-april-2020.png\">\n</a></p>\n\n<p>Best,</p>\n\n<p>Team Netlify</p>"},{"title":"Automate Order Fulfillment w/Stripe Webhooks & Netlify Functions","link":"https://www.netlify.com/blog/2020/04/22/automate-order-fulfillment-w/stripe-webhooks-netlify-functions/","pubDate":"Wed, 22 Apr 2020 00:00:00 +0000","author":{},"guid":"https://www.netlify.com/blog/2020/04/22/automate-order-fulfillment-w/stripe-webhooks-netlify-functions/","description":"<p>When selling products on your Jamstack site you can use Netlify Functions to automate your fulfillment process. In this tutorial, which builds on the code from our previous post, <a href=\"https://www.netlify.com/blog/2020/04/13/learn-how-to-accept-money-on-jamstack-sites-in-38-minutes/?utm_source=blog&amp;utm_medium=stripe-jl&amp;utm_campaign=devex\"><em>Learn How to Accept Money on Jamstack Sites</em></a>, you&rsquo;ll learn how to <strong>automatically send an email to your fulfillment provider when a payment has been made so that they can send out the goods to your customers.</strong></p>\n\n<p>For this tutorial, we’ll use <a href=\"https://sendgrid.com/\">Sendgrid</a> to send transactional emails. You’ll need an account if you’re coding along with us.</p>\n\n<blockquote>\n<p><strong>Heads up!</strong> Sending an email is just one example of an action that you can take when receiving a <a href=\"https://stripe.com/docs/webhooks\">webhook from Stripe</a>. You could also update your database, make a request to your inventory API, or any combination of actions to automate your fulfillment process — the Stripe webhook and Netlify Functions setup will be the same!</p>\n</blockquote>\n\n<h2 id=\"set-up-the-project\">Set up the project</h2>\n\n<p>Before we start writing code, we need to make sure we have the appropriate credentials, environment variables, and dependencies to accomplish our task.</p>\n\n<h3 id=\"add-your-environment-variables-in-netlify\">Add your environment variables in Netlify</h3>\n\n<p>To your <a href=\"https://app.netlify.com\">Netlify dashboard</a>, head to your &ldquo;Deploy settings&rdquo; under &ldquo;Environment&rdquo; add the following variables which we need to handle the webhook events and send emails with Sendgrid:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">Variable</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n\n<tbody>\n<tr>\n<td align=\"left\"><code>SENDGRID_API_KEY</code></td>\n<td align=\"left\"><a href=\"https://app.sendgrid.com/settings/api_keys\">Your SendGrid API key</a></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>FULFILLMENT_EMAIL_ADDRESS</code></td>\n<td align=\"left\">The email address of your fulfillment provider</td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>FROM_EMAIL_ADDRESS</code></td>\n<td align=\"left\">Your email address that SendGrid will send the email from</td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>STRIPE_WEBHOOK_SECRET</code></td>\n<td align=\"left\">Your Stripe webhook secret. Read below how to create it</td>\n</tr>\n</tbody>\n</table>\n\n<h3 id=\"install-dependencies\">Install dependencies</h3>\n\n<p>Next, install the <code>stripe</code> and <code>@sendgrid/mail</code> as dependencies for our functions:</p>\n\n<pre><code class=\"language-bash\"># move into the functions directory\ncd functions/\n\n# install Stripe &amp; SendGrid\nnpm i stripe &amp;&amp; npm i @sendgrid/mail\n\n# move back to the project root\ncd ..\n</code></pre>\n\n<h2 id=\"create-a-serverless-function-to-receive-the-webhook-event-and-send-the-email\">Create a serverless function to receive the webhook event and send the email</h2>\n\n<p>In your functions folder, create a new file: <code>functions/handle-purchase.js</code>. This function will:</p>\n\n<ol>\n<li>receive the Stripe webhook event, (a <code>POST</code> request sent from Stripe when the payment was successful),</li>\n<li>verify that the request is legitimate,</li>\n<li>extract the purchase details, and</li>\n<li>send them via email to our fulfillment provider.</li>\n</ol>\n\n<p><span></span></p>\n\n<pre><code class=\"language-js\">const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);\n\nconst sgMail = require('@sendgrid/mail');\nsgMail.setApiKey(process.env.SENDGRID_API_KEY);\n\nexports.handler = async ({ body, headers }) =&gt; {\n  try {\n    // check the webhook to make sure it’s valid\n    const stripeEvent = stripe.webhooks.constructEvent(\n      body,\n      headers['stripe-signature'],\n      process.env.STRIPE_WEBHOOK_SECRET\n    );\n\n    // only do stuff if this is a successful Stripe Checkout purchase\n    if (stripeEvent.type === 'checkout.session.completed') {\n      const eventObject = stripeEvent.data.object;\n      const items = eventObject.display_items;\n      const shippingDetails = eventObject.shipping;\n\n      // Send and email to our fulfillment provider using Sendgrid.\n      const purchase = { items, shippingDetails };\n      const msg = {\n        to: process.env.FULFILLMENT_EMAIL_ADDRESS,\n        from: process.env.FROM_EMAIL_ADDRESS,\n        subject: `New purchase from ${shippingDetails.name}`,\n        text: JSON.stringify(purchase, null, 2),\n      };\n      await sgMail.send(msg);\n    }\n\n    return {\n      statusCode: 200,\n      body: JSON.stringify({ received: true }),\n    };\n  } catch (err) {\n    console.log(`Stripe webhook failed with ${err}`);\n\n    return {\n      statusCode: 400,\n      body: `Webhook Error: ${err.message}`,\n    };\n  }\n};\n</code></pre>\n\n<h3 id=\"why-do-we-need-to-verify-the-webhook-signature\">Why do we need to verify the webhook signature?</h3>\n\n<p>Since this will instruct our fulfillment provider to send out physical goods, we need to make sure that this request was actually sent by Stripe and not created by a malicious third-party.</p>\n\n<p>For this we use our <code>STRIPE_WEBHOOK_SECRET</code> and the <code>stripe.webhooks.constructEvent</code> helper from stripe-node. When testing locally, the webhook secret will be returned to you by the Stripe CLI, otherwise you will retrieve the webhook secret from the Stripe Dashboard when creating your production webhook endpoint.</p>\n\n<h2 id=\"forward-webhook-events-to-your-local-server-with-the-stripe-cli\">Forward webhook events to your local server with the Stripe CLI</h2>\n\n<p>In the <a href=\"https://www.netlify.com/blog/2020/04/13/learn-how-to-accept-money-on-jamstack-sites-in-38-minutes/?utm_source=blog&amp;utm_medium=stripe-jl&amp;utm_campaign=devex\">previous tutorial</a>, we learned how to run functions locally using <code>ntl dev</code>. Testing webhook events locally can be challenging since your local server (<code>localhost</code>) is not reachable via the internet.</p>\n\n<p>To make local development and testing possible, Stripe provides a CLI that allows you to forward webhook events to a server running locally.</p>\n\n<p><a href=\"https://stripe.com/docs/stripe-cli\">Install the CLI</a> and <a href=\"https://stripe.com/docs/stripe-cli#link-account\">link your Stripe account</a>.</p>\n\n<p>Open a second terminal window since this needs to be running at the same time as your development site, then start the Stripe CLI with the following command:</p>\n\n<pre><code class=\"language-bash\">stripe listen --forward-to localhost:8888/.netlify/functions/handle-purchase\n</code></pre>\n\n<p>The CLI will print a webhook secret key to the console. Set <code>STRIPE_WEBHOOK_SECRET</code> to this value in your Netlify &ldquo;Deploy settings&rdquo; under &ldquo;Environment&rdquo;.</p>\n\n<blockquote>\n<p><strong>Heads up!</strong> After setting the webhook secret in your Netlify dashboard you will need to stop and restart <code>ntl dev</code> for it to be available locally.</p>\n</blockquote>\n\n<h2 id=\"deploy-to-production\">Deploy to production</h2>\n\n<p>When you&rsquo;re ready to move things to live mode, add a new webhook endpoint in your <a href=\"https://dashboard.stripe.com/webhooks\">Stripe Dashboard</a>:</p>\n\n<ul>\n<li>Endpoint URL: <a href=\"https://your-domain.com/.netlify/functions/handle-purchase\">https://your-domain.com/.netlify/functions/handle-purchase</a></li>\n<li>Events to send: <code>checkout.session.completed</code></li>\n</ul>\n\n<p><img src=\"/img/blog/stripe-add-webhook.png\" alt=\"Add webhook endpoint screenshot\" /></p>\n\n<p>After you click the &ldquo;Add endpoint&rdquo; button, you will see your webhook details, including a panel to reveal the webhook secret.</p>\n\n<p><img src=\"/img/blog/stripe-webhook-secret.png\" alt=\"Webhook details screenshot\" /></p>\n\n<p>Click the &ldquo;Click to reveal&rdquo; button and copy the webhook secret to your Netlify environment settings as the <code>STRIPE_WEBHOOK_SECRET</code> variable.</p>\n\n<blockquote>\n<p><strong>Heads up!</strong> After setting the webhook secret in your Netlify dashboard you will need to redeploy your site for it to be available in your function.</p>\n</blockquote>\n\n<p>Once your functions finish deploying, you’re up and running! All successful purchases will now be sent to this function by a Stripe webhook and your fulfillment center will automatically be notified of new sales!</p>\n\n<h2 id=\"what-to-do-next\">What to do next</h2>\n\n<p>For more information, check out <a href=\"https://github.com/stripe-samples/checkout-netlify-serverless/blob/master/functions/handle-purchase.js\">the source code</a> for this example and give it a try!</p>\n\n<p>How will you use webhook notifications to power your e-commerce Jamstack site? <a href=\"https://twitter.com/compose/tweet?text=I%20just%20read%20@jlengstorf%20and%20@thorwebdev%E2%80%99s%20article%20on%20sending%20fulfillment%20emails%20for%20each%20sale%20using%20@sendgrid,%20@stripe%20webhooks,%20and%20@netlify%20Functions&amp;url=https://www.netlify.app/blog/2020/04/22/automate-order-fulfillment-w/stripe-webhooks-netlify-functions/?utm_source=twitter%26utm_medium=stripe-jamstack-webhooks-jl%26utm_campaign=devex\">Let us know on Twitter!</a></p>"},{"title":"Deploying Nx monorepos to Netlify","link":"https://www.netlify.com/blog/2020/04/21/deploying-nx-monorepos-to-netlify/","pubDate":"Tue, 21 Apr 2020 00:00:00 +0000","author":{},"guid":"https://www.netlify.com/blog/2020/04/21/deploying-nx-monorepos-to-netlify/","description":"<p>We&rsquo;re excited to have a guest post from our friend, Rareș Matei, a talented JavaScript Architect from <a href=\"https://nrwl.io/\">Nrwl</a> 👏. Rareș was working on helping devs deploy their monorepos with this super thorough blog post and we thought it would be a great fit on the Netlify blog. If you were looking for different strategies to deploy only the changed files on your monorepo, whether with <a href=\"https://www.netlify.com/build/plugins-beta/?utm_source=blog&amp;utm_medium=nrwl-rares-monorepo_tzm&amp;utm_campaign=devex\">Netlify build plugins</a>, builders in the <a href=\"https://nx.dev/\">Nx workspace</a>, or with CI strategies, this post can help you out. Rareș is working with React in this post but the deployment strategies can work with Angular as well!</p>\n\n<p>If you&rsquo;re new to Nrwl they are a consulting company filled with talented devs that help ambitious enterprises adopt best practices for development pioneered at the world’s leading tech companies. Nrwl was founded by Angular team members and former Googlers, Jeff Cross and Victor Savkin, two brilliant and fun gents. They built their company to focus on developing teams, not just developing applications, to set companies up for long-term success. Netlify and Nrwl have a shared goal of trying to help devs build better sites faster. Read on and you can see some of the free dev tools Nrwl created for that purpose. Happy reading and, as always, happy coding!</p>\n\n<p>— Tara Z. Manicsic | Netlify DX</p>\n\n<h2 id=\"part-1-deploying-monorepos\">📁 Part 1 – Deploying monorepos</h2>\n\n<p>Netlify makes it extremely easy to <a href=\"https://docs.netlify.com/site-deploys/create-deploys/#deploy-with-git\">connect an existing Git repository to a URL</a>, and whenever you push any commits, it will rebuild and re-deploy your app to that URL. You can set it up once, and then forget about it: the deployed app at your URL will always be in sync with the latest state of your Git repository.</p>\n\n<h3 id=\"a-story-of-monorepos\">A story of monorepos</h3>\n\n<p>A monorepo can contain multiple independent apps that live in the same Git repository but are built and deployed separately. There are <a href=\"https://blog.nrwl.io/misconceptions-about-monorepos-monorepo-monolith-df1250d4b03c#d4d8\">many advantages</a> to this structure, but in terms of deployment, consider the below app:</p>\n\n<p><img src=\"https://i.imgur.com/cCcSP6d.png\" alt=\"example monorepo\" /></p>\n\n<p><code>bike-store</code> and <code>car-store</code> are two completely separate products built on top of React that happen to live in the same Git repository and are part of the same organization: this is a monorepo, a very tiny and simple monorepo.</p>\n\n<p>Let&rsquo;s imagine we want to deploy these apps to Netlify:</p>\n\n<ol>\n<li><p>Create a root <code>package.json</code> that can trigger builds for both projects</p>\n\n<p><img src=\"https://i.imgur.com/vSAHoYo.png\" alt=\"example package.json for monorepo\" /></p>\n\n<blockquote>\n<p>🎓 The <code>--prefix</code> flag triggers the <code>npm run build</code> script in a subfolder</p>\n</blockquote></li>\n\n<li><p>Push the repo to Github: <a href=\"https://github.com/rarmatei/netlify-simple-monorepo\">https://github.com/rarmatei/netlify-simple-monorepo</a></p></li>\n\n<li><p>Set-up <strong>two</strong> different sites on Netlify for the <code>car-store</code> and <code>bike-store</code> (there are many <a href=\"https://www.netlify.com/blog/2016/09/29/a-step-by-step-guide-deploying-on-netlify/\n?utm_source=blog&amp;utm_medium=nrwl-rares-monorepo_tzm&amp;utm_campaign=devex\">resources</a> out there on how to do this)</p></li>\n\n<li><p>For both sites, set the correct build commands and point it to the correct publish directory</p>\n\n<p><img src=\"https://i.imgur.com/QLCNoNy.png\" alt=\"configuring netlify to publish from monorepo\" /></p></li>\n\n<li><p>Stand in amazement as your sites update every time you push new changes to GitHub 🤩</p></li>\n</ol>\n\n<p>There&rsquo;s a slight issue though 🤔Netlify will start building and deploying <strong>every</strong> time I push any commit to my monorepo, regardless of what projects I actually changed in those commits – that&rsquo;s just how the default <strong>Netlify&lt;&ndash;&gt;GitHub</strong> integration works. If I create a Netlify site just for the <code>bike-store</code> app, I don’t want it to trigger a build and a re-deployment every time I just make changes to <code>car-store</code>. Nothing will change on the <code>bike-store</code>, so why waste resources re-building and re-deploying the same, unchanged code of the <code>bike-store</code>? (you can imagine this issue getting out of control for even bigger repos with more projects)</p>\n\n<p>So how do we know that the <code>bike-store</code> project changed?</p>\n\n<p>For the above repo, it’s just a case of verifying if any of the files in the <code>bike-store</code> folder changed between different commits:</p>\n\n<pre><code class=\"language-bash=\">git diff --quiet HEAD^ HEAD bike-store/\n</code></pre>\n\n<blockquote>\n<p>🎓 The above command is a handy Git utility that exits with code 1 if there were differences between the latest two commits in the bike-store folder, and code 0 if there weren’t.</p>\n</blockquote>\n\n<p>Netlify actually <a href=\"https://docs.netlify.com/configure-builds/file-based-configuration/#ignore-builds\">recommends using the command above</a> in a <code>netlify.toml</code> file, under <code>build.ignore</code>. This will cancel the build early if no changes actually happened in your sub-folder.</p>\n\n<p><a href=\"https://www.netlify.com/blog/2019/10/09/launching-monorepo-support-for-netlify-sites/?utm_source=blog&amp;utm_medium=nrwl-rares-monorepo_tzm&amp;utm_campaign=devex\">Netlify went even further with monorepo support</a>, and allows you to specify <em>base folders</em>, that will not re-deploy your app unless there were changes in that base folder since the last re-deployment:</p>\n\n<p><img src=\"https://i.imgur.com/ZUnopTe.png\" alt=\"Netlify monorepo support example\" /></p>\n\n<p>This works great with a simple monorepo setup like the above, where nothing is shared between apps!</p>\n\n<p>By keeping our code contained in these independent silos, however, we lose out on some of the advantages of monorepos.</p>\n\n<h3 id=\"next-level-monorepos-with-nx-https-nx-dev-react\">🧑‍🔬Next-level monorepos with <a href=\"https://nx.dev/react\">Nx</a></h3>\n\n<p>Let’s add a new app to our repo, a <code>bike-store-api</code>:</p>\n\n<p><img alt=\"api project added next to the other frontends\" src=\"https://i.imgur.com/XcB0ZQc.png\" width=\"300px\"></p>\n\n<p>Imagine this is a simple Node <a href=\"https://expressjs.com/\">Express</a> server.</p>\n\n<p>Now let’s say we want to enforce using the same version of React across our frontend stores, so we move the React dependencies to the root <code>package.json</code>:</p>\n\n<p><img src=\"https://i.imgur.com/zwo5JzL.png\" alt=\"adding dependencies to root package.json\" /></p>\n\n<p>We also do the same for the Express dependency, used in our API:</p>\n\n<pre><code class=\"language-json=\">&quot;dependencies&quot;: {\n    &quot;react&quot;: &quot;^16.13.1&quot;,\n    &quot;react-dom&quot;: &quot;^16.13.1&quot;,\n    &quot;express&quot;: &quot;4.17.1&quot; &lt;-- THIS IS ALSO NOW IN THE ROOT PACKAGE.JSON\n}\n</code></pre>\n\n<blockquote>\n<p>Even though we moved the dependencies up one level from their individual folders, our repo should still work – Node just goes up the folder tree until it finds a <code>node_modules</code> folder</p>\n</blockquote>\n\n<p>Now let’s imagine a commit modified the version of <em>Express</em>. We don&rsquo;t want Netlify to build and deploy <strong>either</strong> of our two stores, because that change doesn&rsquo;t affect the frontends.</p>\n\n<p>If a commit modifies the version of <em>React</em>, then we <strong>do want to rebuild</strong> both the stores, as the new version might affect how our <code>bike-store</code> and <code>car-store</code> looks and behaves.</p>\n\n<p>Let’s go further with this, and assume we have a function that can validate whether a bike serial number is valid: <code>validateBikeSerialNumber()</code>. This will be useful for both the backend API and the frontend store. So we put it in a special folder under libs, so both projects can import it.</p>\n\n<p><img src=\"https://i.imgur.com/a8BU8eI.png\" alt=\"validateBikeSerialNumber function usage\" /></p>\n\n<p>Now if a commit modifies how that validation function works – we want to rebuild both the <code>bike-store</code> and its <code>bike-store-api</code>, but not the <code>car-store</code>.</p>\n\n<p>If we manually drew our dependency graph at this point, it would look something like this:</p>\n\n<p><img src=\"https://i.imgur.com/3hgHYOJ.png\" alt=\"manual drawing of project dependency graph\" /></p>\n\n<p><details>\n<summary>👉And here&rsquo;s a silly slideshow of how making different changes in our repo can affect other projects</summary></p>\n\n<blockquote>\n<p>The item in the RED BOX will be the one we made changes to. You&rsquo;ll notice that any item pointing an arrow to it, will also remain visible on the screen, as they can be potentially be affected by the change we made to their dependency. Any item which did not depend on the thing we changed, will fade away, as we don&rsquo;t need to rebuild it:</p>\n</blockquote>\n\n<p><img src=\"https://media.giphy.com/media/cOKPPZJYr1FGaj23Ut/giphy.gif\" alt=\"slideshow of affected changes in our project\" /></p>\n\n<p></details></p>\n\n<hr />\n\n<p>Some of the advantages that monorepos give us are sharing code easily between apps and being consistent with our dependency versions. But this comes at the cost of a more complex dependency graph. We no longer have isolated folders for each project, and all the Netlify monorepo helpers we discussed above will not work anymore once we start introducing the above scenarios!</p>\n\n<p><strong>This is where Nx comes in</strong>:</p>\n\n<ul>\n<li>it makes bootstrapping new applications in a monorepo a breeze (using its many available <a href=\"https://nx.dev/nx-plugins\">plugins</a>)</li>\n<li>allows you to quickly create those shared libraries</li>\n<li>enforces best practices to ensure teams <a href=\"https://nx.dev/angular/workspace_structure/monorepo-tags\">don’t step on each other’s</a> toes when working together in big common repos</li>\n<li>most importantly for our use-case, <strong>it knows about your dependency graph</strong>. In all of the above scenarios, Nx can tell which projects have been affected by any one commit or pull request.</li>\n</ul>\n\n<p>Let&rsquo;s re-create the above project in Nx. This is where you can start following along!</p>\n\n<p><a href=\"https://nxplaybook.com/p/nx-workspaces\">Nrwl&rsquo;s &ldquo;Nx Workspaces&rdquo; course</a> covers most of the below steps in video format, so I&rsquo;ve linked to some of that content below:</p>\n\n<ol>\n<li><p>Create a fresh, empty Nx workspace (<a href=\"https://youtu.be/wQhSJN7cMJA\">VIDEO</a>)</p>\n\n<pre><code class=\"language-bash\">  yarn create nx-workspace transport-stores --preset=empty --cli=nx\n  cd transport-stores\n</code></pre></li>\n\n<li><p>In your root <code>nx.json</code> delete lines 5 to 8</p>\n\n<p><img alt=\"Removing implicit Nx package.json deps\" width=\"350\" src=\"https://i.imgur.com/yJ6ttuo.png\"></p></li>\n\n<li><p>We&rsquo;ll want to add two React apps – so let&rsquo;s install the Nx React plugin and then ask Nx to generate them for us (<a href=\"https://youtu.be/ewqCGPH97Wg\">VIDEO</a>)</p>\n\n<pre><code class=\"language-bash=\">  yarn add @nrwl/react\n  yarn nx generate @nrwl/react:app bike-store --style=css --routing\n  yarn nx generate @nrwl/react:app car-store --style=css --routing\n</code></pre></li>\n\n<li><p>Inspect the <code>apps/</code> folder. You should have two new React apps ready to go. You can serve them locally with <code>nx serve bike-store</code> / <code>nx serve car-store</code></p></li>\n\n<li><p>Now generate an Express backend for our <code>bike-store</code> (<a href=\"https://www.youtube.com/watch?v=Y9ZgpvcFUXs\">VIDEO</a>)</p>\n\n<pre><code class=\"language-bash=\">  yarn add @nrwl/express\n  yarn nx generate @nrwl/express:app bike-store-api --frontendProject=bike-store\n</code></pre></li>\n\n<li><p>Inspect the <code>apps/bike-store-api</code> folder – it&rsquo;s a ready to go Express app, with a proxy pre-configured for the <code>bike-store</code> frontend project.</p></li>\n\n<li><p>Generate a utility lib for bikes (<a href=\"https://youtu.be/nmF6wl5QBo4\">VIDEO</a>)</p>\n\n<pre><code class=\"language-bash\">   yarn nx generate @nrwl/workspace:lib bike-utils\n</code></pre>\n\n<p>And add our very complex function to the lib:</p>\n\n<p><img src=\"https://i.imgur.com/ZlVjsH7.png\" alt=\"generating an Nx bike-utils lib\" /></p></li>\n\n<li><p>And add this import into <code>apps/bike-store/src/app/app.tsx</code> and <code>apps/bike-store-api/src/main.ts</code></p>\n\n<pre><code class=\"language-ts=\">   import { validateBikeSerialNumber } from '@transport-stores/bike-utils';\n</code></pre></li>\n\n<li><p>Commit everything. You should now have a project similar to what we&rsquo;ve been discussing above:</p>\n\n<ul>\n<li>Two frontend React apps: <code>bike-store</code> and <code>car-store</code></li>\n<li>An Express API: <code>bike-store-api</code></li>\n<li>A root <code>package.json</code> containing all the dependencies</li>\n<li>A utils lib used by <code>bike-store</code> and <code>bike-store-api</code></li>\n</ul></li>\n\n<li><p>Run this command to see your dependency graph (<a href=\"https://www.youtube.com/watch?v=cMZ-ReC-jWU&amp;feature=emb_logo\">VIDEO</a>)</p>\n\n<pre><code class=\"language-bash=\">   yarn nx dep-graph\n</code></pre>\n\n<p><img alt=\"nx dep graph\" height=\"300px\" src=\"https://i.imgur.com/bPcZSmP.png\"></p></li>\n\n<li><p>Make a change to <code>libs/bike-utils/src/lib/bike-utils.ts</code> and then run:</p>\n\n<pre><code class=\"language-bash=\">   yarn nx affected:dep-graph\n</code></pre>\n\n<p><img alt=\"nx dep graph just for the affected projects\" height=\"300px\" src=\"https://i.imgur.com/A07elQh.png\"></p>\n\n<p>🔥Nx can generate interactive visual graphs on the fly of what&rsquo;s been affected in your project! No more manual silly drawings like in the beginning of this article!</p></li>\n\n<li><p>Commit everything, make a change to the Express version in <code>package.json</code> and run this:</p>\n\n<pre><code class=\"language-bash=\">  yarn nx print-affected --select=&quot;projects&quot;\n</code></pre></li>\n</ol>\n\n<p>Because by changing the version of Express, we affect the <code>bike-store-api</code> as well, you should see an output like this:</p>\n\n<p><img src=\"https://i.imgur.com/xJwrtTq.png\" alt=\"output of nx print-affected command\" /></p>\n\n<p>Running the above command prints out a list of all the projects affected by all the changes since our last commit, regardless of whether we touched something in the directory of the <code>bike-store</code>, the root <code>package.json</code>, or one of the shared libs. This is really powerful and opens up numerous possibilities – as we shall now see!</p>\n\n<p>P.S. I really recommend you watch the whole <a href=\"https://nxplaybook.com/p/nx-workspaces\">&ldquo;Nx Workspaces&rdquo;</a> course to get a better feel of what Nx can do.</p>\n\n<h2 id=\"part-2-smart-github-monorepo-deployments-with-netlify\">💡 Part 2 – Smart GitHub monorepo deployments with Netlify</h2>\n\n<h3 id=\"netlify-build-plugins\">Netlify Build Plugins</h3>\n\n<p>An exciting new feature Netlify recently released is <a href=\"https://docs.netlify.com/configure-builds/build-plugins/?utm_source=blog&amp;utm_medium=nrwl-rares-monorepo_tzm&amp;utm_campaign=devex\">Build Plugins</a>. Using them, you can hook into different deployment stages, and perform actions that affect the build. Let’s create a plugin that hooks into the <code>onInit</code> stage, the very first stage of the build process:</p>\n\n<ol>\n<li><p>Create a new file in <code>transport-stores/tools/plugins/netlify/stop-build/index.js</code>:</p>\n\n<pre><code class=\"language-javascript=\"> module.exports = {\n   onInit: () =&gt; {\n     console.log('Hello world from the plugin!');\n   }\n };\n</code></pre></li>\n\n<li><p>Create a <code>manifest.yaml</code> in the same folder, and give your plugin a name:</p>\n\n<pre><code class=\"language-yaml=\"> name: netlify-skip-build\n</code></pre></li>\n\n<li><p>In the root of your workspace, add a <code>netlify.toml</code> file to enable your new plugin next time you deploy:</p>\n\n<pre><code> [[plugins]]\n package = &quot;./tools/plugins/netlify/stop-build&quot;\n</code></pre></li>\n\n<li><p>Push your new workspace to GitHub</p></li>\n\n<li><p>Create two new sites for <code>bike-store</code> and <code>car-store</code> as discussed in Part 1 – both connected to the same GitHub repository</p></li>\n</ol>\n\n<p><details>\n<summary>6. Configure the build and output directories for each (click to expand for screenshots)</summary></p>\n\n<h3 id=\"two-separate-sites-both-connected-to-git\">Two separate sites both connected to Git:</h3>\n\n<p><img src=\"https://i.imgur.com/BXqkIxu.png\" alt=\"list of all our sites\" /></p>\n\n<h3 id=\"bike-store-settings\"><code>bike-store</code> settings:</h3>\n\n<p><img src=\"https://i.imgur.com/jpQSxVS.png\" alt=\"bike store configuration\" /></p>\n\n<h3 id=\"car-store-settings\"><code>car-store</code> settings:</h3>\n\n<p><img src=\"https://i.imgur.com/BMXK38G.png\" alt=\"car store configuration\" />\n</details></p>\n\n<p><details>\n<summary>7. Enable the &ldquo;Build Plugins&rdquo; Beta (expand for screenshots)</summary></p>\n\n<p><img src=\"https://i.imgur.com/zQ3llW5.png\" alt=\"enabling the build plugins\" /></p>\n\n<p>Enable it for our two sites:</p>\n\n<p><img src=\"https://i.imgur.com/YBusIO7.png\" alt=\"adding our sites to the build plugins beta\" /></p>\n\n<p></details></p>\n\n<hr />\n\n<p>Now if you push these changes, wait for Netlify to trigger a build and look at your site deployment logs, you should see your message:</p>\n\n<p><img src=\"https://i.imgur.com/iwuKByu.png\" alt=\"build plugin output\" /></p>\n\n<p>In the plugin’s callback, you also get access to a <code>utils</code> object that can be used to cancel the build. We’ll use this to abort if the project hasn’t actually changed:</p>\n\n<pre><code class=\"language-javascript=\">module.exports = {\n  onInit: ({ utils }) =&gt; {\n    const currentProject = 'bike-store';\n    const projectHasChanged = false;\n    if (!projectHasChanged) {\n      utils.build.cancelBuild(\n        `Build was cancelled because ${currentProject} was not affected by the latest changes`\n      );\n    }\n  }\n};\n</code></pre>\n\n<p>Try and push the above changes. Both your sites should get a cancelled build now:</p>\n\n<p><img alt=\"build cancellations\" width=\"400\" src=\"https://i.imgur.com/1OwIVp8.png\"></p>\n\n<h3 id=\"identifying-if-a-project-changed\">Identifying if a project changed</h3>\n\n<p>The <code>nx print-affected</code> command accepts a <code>--base</code> and <code>--head</code> commit ref. Instead of comparing the changes just in our working directory, we can give it a range of commits to intelligently analyze and determine what projects were affected:</p>\n\n<pre><code class=\"language-bash=\">nx print-affected --base=${fromHash} --head=${toHash}\n</code></pre>\n\n<p>The <code>--head</code> will always be our repository&rsquo;s <em>HEAD</em> ref, as it&rsquo;s the latest one. The base commit, that&rsquo;s a bit more tricky: we want to start from the last commit that was successfully deployed. Luckily, <a href=\"https://docs.netlify.com/configure-builds/environment-variables/#git-metadata/\">Netlify offers a neat environment variable</a> just for this: <code>CACHED_COMMIT_REF</code></p>\n\n<p>Let’s use this in the plugin:</p>\n\n<pre><code class=\"language-javascript=\">module.exports = {\n  onInit: ({ utils }) =&gt; {\n    const currentProject = 'bike-store';\n    const lastDeployedCommit = process.env.CACHED_COMMIT_REF;\n    const latestCommit = 'HEAD';\n    const projectHasChanged = projectChanged(\n      currentProject,\n      lastDeployedCommit,\n      latestCommit\n    );\n    if (!projectHasChanged) {\n      utils.build.cancelBuild(\n        `Build was cancelled because ${currentProject} was not affected by the latest changes`\n      );\n    }\n  }\n};\n\nfunction projectChanged(currentProject, fromHash, toHash) {\n  const execSync = require('child_process').execSync;\n  const getAffected = `yarn --silent nx print-affected --base=${fromHash} --head=${toHash}`;\n  const output = execSync(getAffected).toString();\n  //get the list of changed projects from the output\n  const changedProjects = JSON.parse(output).projects;\n  if (changedProjects.find(project =&gt; project === currentProject)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n</code></pre>\n\n<p>If the <code>bike-store</code> project is found among the changed projects list – we’ll cancel the build. Since we want to make this project agnostic, instead of the hardcoded <code>bike-store</code> project name, we’ll use a custom environment variable (replace line 3 with this):</p>\n\n<pre><code class=\"language-javascript=\">const currentProject = process.env.PROJECT_NAME;\n</code></pre>\n\n<p>And then we’ll add this in the Netlify dashboard for the <code>bike-site</code> (do the same for the <code>car-site</code>):</p>\n\n<p><img src=\"https://i.imgur.com/ceGekeg.png\" alt=\"add project name env var to Netlify\" /></p>\n\n<p>Now if we make a change to just <code>car-store</code> and push, both projects start building. The <code>bike-store</code> will get cancelled early once Netlify notices that it hasn’t changed. This saves you from wasting those precious build minutes.</p>\n\n<p>If we make a change to the shared <code>validateSerialNumber()</code> function, you&rsquo;ll notice <code>bike-store</code> completes the deployment, while <code>car-store</code> gets cancelled early (as it hasn&rsquo;t been affected). If you bump the React version in the root <code>package.json</code>, both projects will complete the deployment now, as they both depend on React. If you make a change in just the API project, or if you change the <code>Express</code> version in <code>package.json</code>, you&rsquo;ll see both sites getting cancelled early and not getting deployed—our frontends don&rsquo;t really care about how the API is built.</p>\n\n<p>We&rsquo;ve just set-up an automated process that will scale and continue to work as our project grows and the relationships between the different libs, apps and dependencies in our monorepo becomes more complex.</p>\n\n<h2 id=\"part-3-using-builders-in-nx-to-deploy-specific-projects-from-the-command-line\">🧱 Part 3 – Using builders in Nx to deploy specific projects from the command line</h2>\n\n<p>Nx has a different deployment option instead of using the Netlify build plugins. Let&rsquo;s walk through that now.</p>\n\n<hr />\n\n<p>&ldquo;Builders&rdquo; in an Nx workspace are custom tasks that Nx can invoke. Each project in your root <code>workspace.json</code> can be configured with multiple builders, responsible for making different things happen to your project. For example, to build our <code>bike-store</code> project to <code>dist/apps/bike-store</code> we need to run the command: <code>nx build bike-store</code></p>\n\n<p>And that&rsquo;s configured in <code>workspace.json</code> as:</p>\n\n<pre><code class=\"language-json\">&quot;projects&quot;: {\n    &quot;bike-store&quot;: {\n      &quot;root&quot;: &quot;apps/bike-store&quot;,\n      //...\n      &quot;architect&quot;: {\n        &quot;build&quot;: { // &lt;-- we give it a name here, which Nx will use\n          &quot;builder&quot;: &quot;@nrwl/web:build&quot;, // &lt;-- the npm package to use\n          &quot;options&quot;: { // &lt;-- we can configure it with some options\n            &quot;outputPath&quot;: &quot;dist/apps/bike-store&quot;,\n            &quot;index&quot;: &quot;apps/bike-store/src/index.html&quot;,\n</code></pre>\n\n<p>If multiple projects have a configuration for <code>build</code>, we can run <code>nx run-many --target=build --all --parallel</code> to build all of them at once in parallel.</p>\n\n<p>Let&rsquo;s configure deployment now:</p>\n\n<ol>\n<li><p>Add a second configuration for deployment in your <code>workspace.json</code></p>\n\n<pre><code class=\"language-json\"> &quot;projects&quot;: {\n     &quot;bike-store&quot;: {\n       &quot;root&quot;: &quot;apps/bike-store&quot;,\n       //...\n       &quot;architect&quot;: {\n         &quot;deploy&quot;: { &lt;-- we'll add this \n           &quot;builder&quot;: &quot;@netlify-builder/deploy:deploy&quot;,\n           &quot;options&quot;: {\n             &quot;outputPath&quot;: &quot;dist/apps/bike-store&quot;, // &lt;-- this needs to be configured correctly\n             &quot;siteId&quot;: &quot;adcb16dd-e757-4115-8bc7-7260c555a9ff&quot;\n           }\n         },\n</code></pre>\n\n<p>The <code>siteId</code> can be grabbed from your site&rsquo;s Netlify dashboard (<em>General</em> &ndash;&gt; <em>Site information</em> &ndash;&gt; <em>API ID</em>):</p>\n\n<p><img src=\"https://i.imgur.com/KeiZEa7.png\" alt=\"adding the Netlify siteId to our workspace.json\" /></p></li>\n\n<li><p>Since it uses the <code>@netlify-builder/deploy</code> package, we need to install it</p>\n\n<pre><code class=\"language-bash=\"> yarn add @netlify-builder/deploy\n</code></pre></li>\n\n<li><p>Our newly added builder also needs a Netlify Token: a very secret string which gives it permission to deploy to your account</p>\n\n<p><a href=\"https://docs.netlify.com/cli/get-started/#obtain-a-token-in-the-netlify-ui\">Obtain a Netlify token</a></p></li>\n\n<li><p>Because it&rsquo;s supposed to be secret, we don&rsquo;t want to add it to our public, checked-in <code>workspace.json</code>. We&rsquo;ll use an environment variable instead (the builder is set-up to look for this env var if the token is not passed in as an option). In your terminal you can run this:</p>\n\n<pre><code class=\"language-bash=\"> NETLIFY_TOKEN=xxxxxx nx deploy bike-store\n</code></pre></li>\n\n<li><p>Make some changes to the <code>bike-store</code> project (maybe change its title), and invoke the above command – you should see your new changes at the URL</p></li>\n\n<li><p>Repeat the steps above for the <code>car-site</code>. Remember to update your <code>siteId</code> and <code>outputPath</code> options for the builder. The Netlify token should stay the same</p>\n\n<p><details>\n <summary>See how your two deploy targets should now look like:</summary></p>\n\n<pre><code class=\"language-json=\"> &quot;car-store&quot;: {\n     &quot;root&quot;: &quot;apps/car-store&quot;,\n     //...\n     &quot;architect&quot;: {\n         &quot;deploy&quot;: {\n         &quot;builder&quot;: &quot;@netlify-builder/deploy:deploy&quot;,\n         &quot;options&quot;: {\n             &quot;outputPath&quot;: &quot;dist/apps/car-store&quot;,\n             &quot;siteId&quot;: &quot;4134sa-12a-4134a-45ds-35srffas4&quot;\n         }\n     },\n //..\n &quot;bike-store&quot;: {\n     &quot;root&quot;: &quot;apps/bike-store&quot;,\n     //...\n     &quot;architect&quot;: {\n         &quot;deploy&quot;: {\n         &quot;builder&quot;: &quot;@netlify-builder/deploy:deploy&quot;,\n         &quot;options&quot;: {\n             &quot;outputPath&quot;: &quot;dist/apps/bike-store&quot;,\n             &quot;siteId&quot;: &quot;4134sa-asd-445-bvb-aaqqq&quot;\n         }\n     },\n</code></pre>\n\n<p></details></p></li>\n\n<li><p><em>OPTIONAL</em> – Export the Netlify Token Env variable in your <code>.bashrc</code> file so you don&rsquo;t have to pass it in each time to want to deploy (or <a href=\"https://dev.to/deammer/loading-environment-variables-in-js-apps-1p7p\">use an <code>.env</code> file</a>)</p></li>\n</ol>\n\n<p>Awesome! We now have our repo set-up so that we can run <code>nx deploy bike-store</code> or <code>nx deploy car-store</code> or even <code>nx run-many --target=deploy --all --parallel</code> to deploy all of our projects in parallel (remember to include the NETLIFY_TOKEN env variable). We&rsquo;ll then see our results at a live URL.</p>\n\n<h2 id=\"part-4-automatic-ci-monorepo-deploys\">🤖 Part 4 – Automatic CI monorepo deploys</h2>\n\n<p>We&rsquo;ll now look at even more powerful Nx command, that allows us to invoke builders/tasks only on the projects affected by our latest changes: <code>nx affected</code></p>\n\n<hr />\n\n<p>Because we set-up a <code>deploy</code> builder in our workspace earlier, we can now use this command to only deploy what&rsquo;s changed:</p>\n\n<pre><code class=\"language-bash=\">nx affected --target=deploy\n</code></pre>\n\n<p>If you now make a change to just the <code>car-store</code>, and run the above command, you&rsquo;ll notice a new deployment on Netlify just for the <code>car-store</code> site.</p>\n\n<p>Let&rsquo;s add a new script to <code>package.json</code>:</p>\n\n<pre><code class=\"language-json=\">&quot;scripts&quot;: {\n    &quot;affected:deploy&quot;: &quot;nx affected --target=deploy&quot;\n}\n</code></pre>\n\n<p>The great thing about commands is they can be run from anywhere: from a developer machine&rsquo;s, but especially from a CI.</p>\n\n<p>Let&rsquo;s set-up CircleCI to automatically run the above command anytime we push to our GitHub repo:</p>\n\n<ol>\n<li><p><a href=\"https://circleci.com/docs/2.0/getting-started/#section=getting-started\">Create a new CircleCI project and connect it to your monorepo&rsquo;s GitHub location</a></p></li>\n\n<li><p>Add your <code>NETLIFY_TOKEN</code> <a href=\"https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project\">as an environment variable to CircleCI</a></p></li>\n\n<li><p>Configure your <code>circle.yaml</code> file:</p>\n\n<pre><code class=\"language-yaml=\"> version: 2.1\n orbs:\n   node: circleci/node@1.1.6\n jobs:\n   build-test-and-deploy:\n executor:\n   name: node/default\n steps:\n   - checkout\n   - node/with-cache:\n     steps:\n       - run: npm install\n       - run: yarn affected:deploy --base=&lt;&lt; pipeline.git.base_revision &gt;&gt; --head=HEAD\n\n workflows:\n   build-test-and-deploy:\n jobs:\n   - build-test-and-deploy\n</code></pre>\n\n<p>☝️This configures CircleCI to run this command every time we push to our GitHub repo:</p>\n\n<pre><code class=\"language-bash=\"> yarn affected:deploy --base=&lt;&lt; pipeline.git.base_revision &gt;&gt; --   head=HEAD\n</code></pre>\n\n<p>As with <code>nx print-affected</code>, we can send a <code>--base</code> and <code>--head</code> commit to <code>nx affected</code>. CircleCI will replace <code>&lt;&lt; pipeline.git.base_revision &gt;&gt;</code> with the commit hash of the last build (it&rsquo;s the equivalent of the Netlify <code>CACHED_COMMIT_REF</code> we saw earlier).</p></li>\n\n<li><p>Push your changes so CircleCI can pick them up</p></li>\n\n<li><p>Make a change to just the <code>car-store</code> and push – if you check your Netlify dashboard, you should only see a new deployment for the <code>car-store</code> site!</p></li>\n\n<li><p>Make a change to the shared <code>validateSerialNumber()</code> function and push! It should only have deployed <code>bike-store</code>.</p></li>\n\n<li><p>Bump the react version in the root <code>package.json</code> and push – it should deploy both the <code>car-store</code> and <code>bike-store</code>!</p></li>\n\n<li><p>Make a change in the <code>bike-store</code> API, or update the Express version in the root <code>package.json</code>, and you should see absolutely no activity on the Netlify dashboard – as our frontends don&rsquo;t need to be re-deployed if we just make changes to the backend API.</p></li>\n</ol>\n\n<hr />\n\n<p>If you do go ahead with the CircleCI setup mentioned above, you will need to make sure you disable the GitHub integration for your Netlify sites – otherwise Netlify will also try to deploy directly every time you push to GitHub. This can be done in various ways:</p>\n\n<ol>\n<li><p>Revoke Netlify permissions on your GitHub account (this is global and affects all your sites)</p></li>\n\n<li><p>When you click on &ldquo;New site&rdquo; on the Netlify dashboard, drag a directory to the wizard (instead of clicking on GitHub). That way it won&rsquo;t be linked to a specific repository.</p></li>\n\n<li><p>Configure your Netlify site to deploy from a branch that you know will never exist:</p>\n\n<p><img src=\"https://i.imgur.com/8bHFAX1.png\" alt=\"configuring Netlify to stop deploying sites from GitHub\" /></p></li>\n</ol>\n\n<p>Here is the complete repo with all the changes discussed in all 4 parts: <a href=\"https://github.com/rarmatei/netlify-nx-monorepo-deployments\">https://github.com/rarmatei/netlify-nx-monorepo-deployments</a></p>\n\n<h2 id=\"well-done\">🧙 Well done!</h2>\n\n<p>Great job on getting this far! Let&rsquo;s quickly recap our journey:</p>\n\n<p>In <strong>Part 1</strong> we discussed the problem of automatically deploying every time a monorepo&rsquo;s <code>master</code> branch is updated: we want to re-build and re-deploy only the projects that actually changed.</p>\n\n<p>Netlify already offers monorepo support, but if we want to use shared libs and root level common NPM dependencies, we need a tool like Nx for intelligent dependency graph analysis.</p>\n\n<p>In <strong>Part 2</strong> we looked at solving our problem by using the <code>nx print-affected</code> command to print out which projects have changed. We then used the very powerful <em>&ldquo;Netlify Build Plugins&rdquo;</em> to hook into the build process early and abandon it if Nx tells us the project hasn&rsquo;t changed since the last we deployed.</p>\n\n<p>As a bonus, we also learned how easy it is to set-up and manage monorepos using Nx, and how quickly we can bootstrap multi-frontend workspaces with backend APIs.</p>\n\n<p>In <strong>Part 3</strong> we added deployment capabilities to our Nx workspace via a &ldquo;Builder&rdquo; (which is essentially just a task runner), and looked at how to deploy projects using short terminal commands like: <code>nx deploy any-project-name-you-want</code></p>\n\n<p>In <strong>Part 4</strong> we dove deeper into Nx&rsquo;s monorepo orchestration capabilities, and configured CircleCI to call <code>nx affected --target=deploy</code>. This will figure out what projects changed, and will call the <code>deploy</code> builder we configured on <em>Part 3</em> just on those projects.</p>\n\n<hr />\n\n<p>Using Netlify and Nx together we created some scalable, one-time setups, that allow us to really take full advantage of monorepos while also ensuring continuous deployments work without wasting unnecessary resources!</p>\n\n<h2 id=\"resources-for-the-road\">Resources for the Road</h2>\n\n<ul>\n<li><a href=\"https://blog.nrwl.io/building-full-stack-react-applications-in-a-monorepo-7dfa1714b988\">Building Full Stack React Applications in a Monorepo</a></li>\n<li><a href=\"https://www.netlify.com/blog/2019/09/17/using-the-angular-builder-for-netlify/?utm_source=blog&amp;utm_medium=nrwl-rares-monorepo_tzm&amp;utm_campaign=devex\">Using the Angular Builder for Netlify</a></li>\n<li><a href=\"https://blog.nrwl.io/how-to-never-build-or-test-the-same-code-twice-2dc58e413279\">How to never build or test the same code twice</a></li>\n</ul>"}]}}}